const express = require('express');
const https = require('https');
const fs = require('fs');
const cors = require('cors'); // Importa el paquete CORS
const router = express.Router();

class Engine {
    constructor() {
        this.registryFileName = "/home/lpv24/Escritorio/SD/SD/Groso/BD.json"; // Ruta del archivo JSON del registro
        this.idsVerificados = [];
    }

    verificarToken(token) {
        try {
            if (fs.existsSync(this.registryFileName)) {
                const data = fs.readFileSync(this.registryFileName, 'utf8');
                const registryData = JSON.parse(data);
                for (const droneAlias in registryData) {
                    if (registryData[droneAlias].token === token) {
                        this.idsVerificados.push(registryData[droneAlias].id); // Guardar el ID verificado
                        console.log(this.idsVerificados);
                        return { message: "Token válida", droneAlias };
                    }
                }
                return { error: "Token no válida" };
            } else {
                return { error: "El archivo JSON del registro no existe o está vacío" };
            }
        } catch (err) {
            console.error('Error al leer el archivo JSON:', err);
            return { error: "Error al verificar la token" };
        }
    }

    obtenerIDsVerificados() {
        return this.idsVerificados;
    }

    leerMapaDesdeJSON() {
        try {
            if (fs.existsSync(this.registryFileName)) {
                const data = fs.readFileSync(this.registryFileName, 'utf8');
                const mapa = JSON.parse(data).mapa; // Suponiendo que 'mapa' es la clave donde está el mapa en BD.json
                return mapa;
            } else {
                throw new Error("El archivo JSON del registro no existe o está vacío");
            }
        } catch (err) {
            console.error('Error al leer el archivo JSON:', err);
            return null;
        }
    }

    procesarMapa() {
        const mapa = this.leerMapaDesdeJSON();
        if (!mapa) {
            return null;
        }
        const posicionesNoCero = [];
        for (let i = 0; i < mapa.length; i++) {
            for (let j = 0; j < mapa[i].length; j++) {
                if (mapa[i][j] !== 0) {
                    posicionesNoCero.push([i, j, mapa[i][j][0][0], mapa[i][j][2]]); // Agrega la posición al array si no es igual a cero
                }
            }
        }
        return posicionesNoCero;
    }

    leerTempDesdeJSON() {
        try {
            if (fs.existsSync(this.registryFileName)) {
                const data = fs.readFileSync(this.registryFileName, 'utf8');
                const clima = JSON.parse(data).clima; // Suponiendo que 'clima' es la clave donde está el mapa en BD.json
                return clima;
            } else {
                throw new Error("El archivo JSON del registro no existe o está vacío");
            }
        } catch (err) {
            console.error('Error al leer el archivo JSON:', err);
            return null;
        }
    }

    leerLogsDesdeJSON() {
        try {
            if (fs.existsSync(this.registryFileName)) {
                const data = fs.readFileSync(this.registryFileName, 'utf8');
                const logs = JSON.parse(data).logs; // Suponiendo que 'logs' es la clave donde está el mapa en BD.json
                return logs;
            } else {
                throw new Error("El archivo JSON del registro no existe o está vacío");
            }
        } catch (err) {
            console.error('Error al leer el archivo JSON:', err);
            return null;
        }
    }

    // Función para agregar logs al archivo JSON
    agregarLogAlJSON(newLog) {
        try {
            if (fs.existsSync(this.registryFileName)) {
                const data = fs.readFileSync(this.registryFileName, 'utf8');
                const jsonData = JSON.parse(data);

                if (!jsonData.logs) {
                    jsonData.logs = []; // Si no hay un array de logs, créalo
                }

                jsonData.logs.push(newLog); // Agrega el nuevo log al array

                fs.writeFileSync(this.registryFileName, JSON.stringify(jsonData, null, 2));
                return { message: "Log agregado correctamente" };
            } else {
                throw new Error("El archivo JSON del registro no existe o está vacío");
            }
        } catch (err) {
            console.error('Error al añadir log al archivo JSON:', err);
            return { error: "Error al añadir el log al archivo JSON" };
        }
    }
}

const engine = new Engine();

router.post('/verificar_dron', (req, res) => {
    const { token } = req.body;
    if (!token) {
        return res.status(400).json({ error: "Falta el token del dron" });
    }

    const resultado = engine.verificarToken(token);
    res.json(resultado);
});

router.get('/ids_verificados', (req, res) => {
    const idsVerificados = engine.obtenerIDsVerificados();
    res.json({ idsVerificados });
});

router.get('/obtener_mapa', (req, res) => {
    const datosMapaProcesado = engine.procesarMapa(); // Obtén el mapa procesado
    res.json({ datosMapaProcesado });
});

router.get('/obtener_clima', (req, res) => {
    const clima = engine.leerTempDesdeJSON(); // Obtén el mapa procesado
    res.json({ clima });
});

router.get('/obtener_logs', (req, res) => {
    const logs = engine.leerLogsDesdeJSON(); // Obtén el mapa procesado
    res.json({ logs });
});

router.post('/agregar_log', (req, res) => {
    const { nuevoLog } = req.body; // Suponiendo que el cuerpo de la solicitud tiene un campo "nuevoLog"
    if (!nuevoLog) {
        return res.status(400).json({ error: "Falta el nuevo log" });
    }
    const resultado = engine.agregarLogAlJSON(nuevoLog);
    res.json(resultado);
});

const app = express();
app.use(express.json());
app.use(cors()); // Agrega el middleware de CORS
app.use('/', router);

const options = {
    key: fs.readFileSync('key.pem'),
    cert: fs.readFileSync('cert.pem')
};

const PORT = process.env.PORT || 3001; // Puerto para la API del motor

const server = https.createServer(options, app);

server.on('error', (error) => {
    console.error('Error al iniciar el servidor:', error);
});

server.listen(PORT, () => {
    console.log(`Servidor HTTPS del motor escuchando en el puerto ${PORT}`);
});
